# -*- coding: utf-8 -*-
"""Final Task_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Wh3TOcHaLtTfLfTkXhZLQjOYnaSoxhh
"""

from google.colab import drive
drive.mount("/content/gdrive")

import pandas as pd

#Pemodelan
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn .preprocessing import MinMaxScaler

#Visualisasi
import matplotlib.pyplot as plt
import seaborn as sns

"""# LOAD DATA"""

d_transaksi = pd.read_csv("/content/gdrive/MyDrive/Data Sheet/Case Study - Transaction.csv", delimiter=';')
d_transaksi.head()

d_cs= pd.read_csv("/content/gdrive/MyDrive/Data Sheet/Case Study - Customer.csv", delimiter=";")
d_cs.head()

d_produk = pd.read_csv("/content/gdrive/MyDrive/Data Sheet/Case Study - Product.csv", delimiter=";")
d_produk.head()

d_store = pd.read_csv("/content/gdrive/MyDrive/Data Sheet/Case Study - Store.csv", delimiter=";")
d_store.head()

"""# DATA CLEANSING"""

data_info = [d_transaksi, d_cs, d_produk, d_store]

for i in data_info:
  display(i.info())
  print("\n")

d_transaksi['Date'] = pd.to_datetime(d_transaksi['Date'])

d_cs['Income'] = d_cs['Income'].str.replace(',', '').astype(int)

"""# DATA MERGE"""

merged_data = pd.merge(d_transaksi, d_cs, on='CustomerID')
merged_data = pd.merge(merged_data, d_produk, on='ProductID')
merged_data = pd.merge(merged_data, d_store, on='StoreID')

merged_data.head()

"""# AGREGASI"""

# Groupby CustomerID dan melakukan aggregasi
aggregated_data = merged_data.groupby('CustomerID').agg({
    'TransactionID': 'count',
    'Qty': 'sum',
    'TotalAmount': 'sum'
}).reset_index()

aggregated_data.head()

"""# KMEANS CLUSTERING"""

X = aggregated_data["CustomerID"]

aggregated_data.drop("CustomerID", axis=1, inplace=True)

aggregated_data.head()

min_max_scaler = MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(aggregated_data)
data_scaled = pd.DataFrame(x_scaled,columns=['TransactionID','Qty','TotalAmount'])
data_scaled

wscc = []
for i in range(1,15):
    kmeans = KMeans(n_clusters=i, init="k-means++",random_state=0)
    kmeans.fit(data_scaled)
    wscc.append(kmeans.inertia_)

plt.figure(figsize=(10,8))
sns.lineplot(x=range(1,15),y=wscc,marker="o",c='blue')
plt.title("Elbow plot for optimal number of clusters")

"""Berdasarkan Elbow Method, jumlah cluster yang sesuai adalah 3 Cluster."""

cluster = KMeans(n_clusters=3, random_state = 42)
cluster_labels = cluster.fit_predict(data_scaled)

# Membuat kolom baru berdasarkan hasil clustering
segment = pd.Series(cluster.labels_, name="segment")

# Menggabungkan data dengan hasil cluster
results = pd.concat([aggregated_data, segment], axis=1)
results.head()

results = pd.concat([X, results], axis=1)
results.head()

"""# EDA"""

plt.figure(figsize=(10, 6))
colors = ['red', 'blue', 'purple']

for cluster_num, color in zip(range(3), colors):
    cluster_points = results[results['segment'] == cluster_num]  # Use cluster_num here
    plt.scatter(cluster_points['Qty'], cluster_points['TotalAmount'], color=color, label=f'Cluster {cluster_num}')

plt.xlabel('Qty')
plt.ylabel('Total Amount')
plt.title('Segmentasi Customer')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
colors = ['red', 'blue', 'purple']

for cluster_num, color in zip(range(3), colors):
    cluster_points = results[results['segment'] == cluster_num]  # Use cluster_num here
    plt.scatter(cluster_points['TransactionID'], cluster_points['TotalAmount'], color=color, label=f'Cluster {cluster_num}')

plt.xlabel('TransactionID')
plt.ylabel('Total Amount')
plt.title('Segmentasi Customer')
plt.legend()
plt.show()

"""# KESIMPULAN

Hasil clustering untuk Customer Segmentation :


1.   Cluster 0 (GOLD)
<br>
      Cluster ini merupakan kelompok pelanggan yang sangat sering melakukan transaksi dengan Kuantitas tinggi, dan Total transaksi Tinggi.
2.   Cluster 1 (SILVER)
<br>
     Cluster ini merupakan kelompok pelanggan yang cukup sering melakukan transaksi dengan kuantitas sedang, dan Total transaksi sedang.
3.   Cluster 2 (BRONZE)
<br>
     Cluster ini merupakan kelompok pelanggan yang jarang melakukan pembelian dengan kuantitas rendah, dan Total transaksi rendah.
"""